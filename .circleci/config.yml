version: 2.1
jobs:
  build:
    working_directory: ~/app
    docker:
      - image: circleci/node:12-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build
          command: |
            if [ $CIRCLE_BRANCH = 'circleci-project-setup' ]; then
              npm run build
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy:
    working_directory: ~/repo
    docker:
      - image: innovatorjapan/awscli:latest
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Deploy
          command: |
            if [ $CIRCLE_BRANCH = 'circleci-project-setup' ]; then
              aws s3 sync build s3://example-react-app-from-ekpono --delete --exact-timestamps;
            fi
workflows:
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - circleci-project-setup
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - circleci-project-setup
# # PHP CircleCI 2.0 configuration file
# # See: https://circleci.com/docs/2.0/language-php/
# version: 2

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   build:
#     working_directory: ~/server
#     # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#     docker:
#       # Specify the version you desire here
#       - image: circleci/php:7.1-node-browsers

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # Using the RAM variation mitigates I/O contention
#       # for database intensive operations.
#       # - image: circleci/mysql:5.7-ram
#       #
#       # - image: redis:2.8.19

#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout

#       - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#       - run: sudo docker-php-ext-install zip

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             # "composer.lock" can be used if it is committed to the repo
#             - v1-dependencies-{{ checksum "composer.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run: composer install -n --prefer-dist

#       - save_cache:
#           key: v1-dependencies-{{ checksum "composer.json" }}
#           paths:
#             - ./vendor
#       - restore_cache:
#           keys:
#             - node-v1-{{ checksum "package.json" }}
#             - node-v1-
#       - run: yarn install
#       - save_cache:
#           key: node-v1-{{ checksum "package.json" }}
#           paths:
#             - node_modules

#       # prepare the database
#       - run: touch storage/testing.sqlite
#       - run: php artisan migrate --env=testing --database=sqlite_testing --force

#       # run tests with phpunit or codecept
#       #- run: ./vendor/bin/phpunit
#       - run: ./vendor/bin/codecept build
#       - run: ./vendor/bin/codecept run
